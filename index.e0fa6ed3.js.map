{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    static defaultInitialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ];\n    static GameStatus = {\n        idle: \"idle\",\n        playing: \"playing\",\n        win: \"win\",\n        lose: \"lose\"\n    };\n    constructor(initialState = $a5fd07fa01589658$var$Game.defaultInitialState){\n        this.board = initialState.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n        this.status = $a5fd07fa01589658$var$Game.GameStatus.idle;\n        this.initialState = initialState.map((row)=>[\n                ...row\n            ]);\n    }\n    getState() {\n        return this.board;\n    }\n    getScore() {\n        return this.score;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        this.status = $a5fd07fa01589658$var$Game.GameStatus.playing;\n        this.newCell();\n        this.newCell();\n    }\n    restart() {\n        this.status = $a5fd07fa01589658$var$Game.GameStatus.idle;\n        this.score = 0;\n        this.board = this.initialState.map((row)=>[\n                ...row\n            ]);\n    }\n    newCell() {\n        const emptyCells = [];\n        for(let y = 0; y < 4; y++){\n            for(let x = 0; x < 4; x++)if (!this.board[y][x]) emptyCells.push({\n                y: y,\n                x: x\n            });\n        }\n        if (emptyCells.length > 0) {\n            const val = Math.floor(Math.random() * emptyCells.length);\n            this.board[emptyCells[val].y][emptyCells[val].x] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    checkGameState() {\n        if (this.board.find((row)=>row.find((el)=>el === 2048))) this.status = $a5fd07fa01589658$var$Game.GameStatus.win;\n        else if (this.checkIfLose()) this.status = $a5fd07fa01589658$var$Game.GameStatus.lose;\n    }\n    checkIfLose() {\n        if (this.board.find((row)=>row.includes(0))) return false;\n        for(let y = 0; y < 4; y++)for(let x = 0; x < 4; x++){\n            if (y < 3 && this.board[y][x] === this.board[y + 1][x]) return false;\n            if (x < 3 && this.board[y][x] === this.board[y][x + 1]) return false;\n        }\n        return true;\n    }\n    move(direction) {\n        if (this.status !== \"playing\") return false;\n        let hasChanged = false;\n        const merged = Array.from({\n            length: 4\n        }, ()=>[\n                false,\n                false,\n                false,\n                false\n            ]);\n        const traverse = (callback, reverse = false)=>{\n            for(let i = 0; i < 4; i++)for(let j = 0; j < 4; j++){\n                const y = reverse ? 3 - i : i;\n                const x = reverse ? 3 - j : j;\n                callback(y, x);\n            }\n        };\n        const moveCell = (startY, startX, nextY, nextX)=>{\n            if (this.board[startY][startX] !== 0) {\n                let newY = startY;\n                let newX = startX;\n                while(newY + nextY >= 0 && newY + nextY < 4 && newX + nextX >= 0 && newX + nextX < 4 && this.board[newY + nextY][newX + nextX] === 0){\n                    newY += nextY;\n                    newX += nextX;\n                }\n                if (newY + nextY >= 0 && newY + nextY < 4 && newX + nextX >= 0 && newX + nextX < 4 && this.board[newY + nextY][newX + nextX] === this.board[startY][startX] && !merged[newY + nextY][newX + nextX]) {\n                    this.board[newY + nextY][newX + nextX] *= 2;\n                    this.score += this.board[newY + nextY][newX + nextX];\n                    this.board[startY][startX] = 0;\n                    merged[newY + nextY][newX + nextX] = true;\n                    hasChanged = true;\n                } else if (newY !== startY || newX !== startX) {\n                    this.board[newY][newX] = this.board[startY][startX];\n                    this.board[startY][startX] = 0;\n                    hasChanged = true;\n                }\n            }\n        };\n        if (direction === \"up\") traverse((y, x)=>moveCell(y, x, -1, 0));\n        else if (direction === \"down\") traverse((y, x)=>moveCell(3 - y, x, 1, 0));\n        else if (direction === \"left\") traverse((y, x)=>moveCell(y, x, 0, -1));\n        else if (direction === \"right\") traverse((y, x)=>moveCell(y, 3 - x, 0, 1));\n        if (hasChanged) {\n            this.newCell();\n            this.checkGameState();\n        }\n        return hasChanged;\n    }\n    moveUp() {\n        return this.move(\"up\");\n    }\n    moveDown() {\n        return this.move(\"down\");\n    }\n    moveLeft() {\n        return this.move(\"left\");\n    }\n    moveRight() {\n        return this.move(\"right\");\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$button = document.querySelector(\".button\");\nconst $09e991522ca7e64e$var$score = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$rows = document.querySelectorAll(\"tr\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\n$09e991522ca7e64e$var$button.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === $a5fd07fa01589658$exports.GameStatus.idle) {\n        $09e991522ca7e64e$var$button.textContent = \"Restart\";\n        $09e991522ca7e64e$var$button.classList.add(\"restart\");\n        $09e991522ca7e64e$var$button.classList.remove(\"start\");\n        $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$game.start();\n    } else {\n        $09e991522ca7e64e$var$button.textContent = \"Start\";\n        $09e991522ca7e64e$var$button.classList.add(\"start\");\n        $09e991522ca7e64e$var$button.classList.remove(\"restart\");\n        $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageStart.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$game.restart();\n    }\n    $09e991522ca7e64e$var$drawBoard();\n});\ndocument.addEventListener(\"keydown\", (eventKey)=>{\n    let canMove = false;\n    if ($09e991522ca7e64e$var$game.getStatus() === \"playing\") {\n        switch(eventKey.key){\n            case \"ArrowUp\":\n                canMove = $09e991522ca7e64e$var$game.moveUp();\n                break;\n            case \"ArrowDown\":\n                canMove = $09e991522ca7e64e$var$game.moveDown();\n                break;\n            case \"ArrowLeft\":\n                canMove = $09e991522ca7e64e$var$game.moveLeft();\n                break;\n            case \"ArrowRight\":\n                canMove = $09e991522ca7e64e$var$game.moveRight();\n                break;\n        }\n        if (canMove) setTimeout(()=>{\n            $09e991522ca7e64e$var$drawBoard();\n            $09e991522ca7e64e$var$updateMessage();\n        }, 100);\n    }\n});\nfunction $09e991522ca7e64e$var$drawBoard() {\n    $09e991522ca7e64e$var$score.textContent = $09e991522ca7e64e$var$game.getScore();\n    const board = $09e991522ca7e64e$var$game.getState();\n    for(let y = 0; y < 4; y++)for(let x = 0; x < 4; x++){\n        const cell = $09e991522ca7e64e$var$rows[y].cells[x];\n        if (board[y][x] === 0) {\n            if (cell.firstChild) cell.removeChild(cell.firstChild);\n        } else if (!cell.firstChild || cell.firstChild.textContent !== board[y][x]) {\n            cell.innerHTML = \"\";\n            const div = document.createElement(\"div\");\n            div.className = `field-cell-num field-cell--${board[y][x]}`;\n            div.textContent = board[y][x];\n            cell.appendChild(div);\n        }\n    }\n}\nfunction $09e991522ca7e64e$var$updateMessage() {\n    const gameStatus = $09e991522ca7e64e$var$game.getStatus();\n    if (gameStatus === $a5fd07fa01589658$exports.GameStatus.win) $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n    else if (gameStatus === $a5fd07fa01589658$exports.GameStatus.lose) $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n}\n\n\n//# sourceMappingURL=index.e0fa6ed3.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst button = document.querySelector('.button');\nconst score = document.querySelector('.game-score');\n\nconst rows = document.querySelectorAll('tr');\n\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\n\nbutton.addEventListener('click', () => {\n  if (game.getStatus() === Game.GameStatus.idle) {\n    button.textContent = 'Restart';\n    button.classList.add('restart');\n    button.classList.remove('start');\n\n    messageStart.classList.add('hidden');\n\n    game.start();\n  } else {\n    button.textContent = 'Start';\n    button.classList.add('start');\n    button.classList.remove('restart');\n\n    messageWin.classList.add('hidden');\n    messageLose.classList.add('hidden');\n    messageStart.classList.remove('hidden');\n\n    game.restart();\n  }\n  drawBoard();\n});\n\ndocument.addEventListener('keydown', (eventKey) => {\n  let canMove = false;\n\n  if (game.getStatus() === 'playing') {\n    switch (eventKey.key) {\n      case 'ArrowUp':\n        canMove = game.moveUp();\n        break;\n      case 'ArrowDown':\n        canMove = game.moveDown();\n        break;\n      case 'ArrowLeft':\n        canMove = game.moveLeft();\n        break;\n      case 'ArrowRight':\n        canMove = game.moveRight();\n        break;\n    }\n\n    if (canMove) {\n      setTimeout(() => {\n        drawBoard();\n        updateMessage();\n      }, 100);\n    }\n  }\n});\n\nfunction drawBoard() {\n  score.textContent = game.getScore();\n\n  const board = game.getState();\n\n  for (let y = 0; y < 4; y++) {\n    for (let x = 0; x < 4; x++) {\n      const cell = rows[y].cells[x];\n\n      if (board[y][x] === 0) {\n        if (cell.firstChild) {\n          cell.removeChild(cell.firstChild);\n        }\n      } else {\n        if (!cell.firstChild || cell.firstChild.textContent !== board[y][x]) {\n          cell.innerHTML = '';\n\n          const div = document.createElement('div');\n\n          div.className = `field-cell-num field-cell--${board[y][x]}`;\n          div.textContent = board[y][x];\n\n          cell.appendChild(div);\n        }\n      }\n    }\n  }\n}\n\nfunction updateMessage() {\n  const gameStatus = game.getStatus();\n\n  if (gameStatus === Game.GameStatus.win) {\n    messageWin.classList.remove('hidden');\n  } else if (gameStatus === Game.GameStatus.lose) {\n    messageLose.classList.remove('hidden');\n  }\n}\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  static defaultInitialState = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  static GameStatus = {\n    idle: 'idle',\n    playing: 'playing',\n    win: 'win',\n    lose: 'lose',\n  };\n\n  constructor(initialState = Game.defaultInitialState) {\n    this.board = initialState.map((row) => [...row]);\n    this.score = 0;\n    this.status = Game.GameStatus.idle;\n    this.initialState = initialState.map((row) => [...row]);\n  }\n\n  getState() {\n    return this.board;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.status = Game.GameStatus.playing;\n    this.newCell();\n    this.newCell();\n  }\n\n  restart() {\n    this.status = Game.GameStatus.idle;\n    this.score = 0;\n\n    this.board = this.initialState.map((row) => [...row]);\n  }\n\n  newCell() {\n    const emptyCells = [];\n\n    for (let y = 0; y < 4; y++) {\n      for (let x = 0; x < 4; x++) {\n        if (!this.board[y][x]) {\n          emptyCells.push({ y: y, x: x });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const val = Math.floor(Math.random() * emptyCells.length);\n\n      this.board[emptyCells[val].y][emptyCells[val].x] =\n        Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  checkGameState() {\n    if (this.board.find((row) => row.find((el) => el === 2048))) {\n      this.status = Game.GameStatus.win;\n    } else if (this.checkIfLose()) {\n      this.status = Game.GameStatus.lose;\n    }\n  }\n\n  checkIfLose() {\n    if (this.board.find((row) => row.includes(0))) {\n      return false;\n    }\n\n    for (let y = 0; y < 4; y++) {\n      for (let x = 0; x < 4; x++) {\n        if (y < 3 && this.board[y][x] === this.board[y + 1][x]) {\n          return false;\n        }\n\n        if (x < 3 && this.board[y][x] === this.board[y][x + 1]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  move(direction) {\n    if (this.status !== 'playing') {\n      return false;\n    }\n\n    let hasChanged = false;\n    const merged = Array.from({ length: 4 }, () => [\n      false,\n      false,\n      false,\n      false,\n    ]);\n\n    const traverse = (callback, reverse = false) => {\n      for (let i = 0; i < 4; i++) {\n        for (let j = 0; j < 4; j++) {\n          const y = reverse ? 3 - i : i;\n          const x = reverse ? 3 - j : j;\n\n          callback(y, x);\n        }\n      }\n    };\n\n    const moveCell = (startY, startX, nextY, nextX) => {\n      if (this.board[startY][startX] !== 0) {\n        let newY = startY;\n        let newX = startX;\n\n        while (\n          newY + nextY >= 0 &&\n          newY + nextY < 4 &&\n          newX + nextX >= 0 &&\n          newX + nextX < 4 &&\n          this.board[newY + nextY][newX + nextX] === 0\n        ) {\n          newY += nextY;\n          newX += nextX;\n        }\n\n        if (\n          newY + nextY >= 0 &&\n          newY + nextY < 4 &&\n          newX + nextX >= 0 &&\n          newX + nextX < 4 &&\n          this.board[newY + nextY][newX + nextX] ===\n            this.board[startY][startX] &&\n          !merged[newY + nextY][newX + nextX]\n        ) {\n          this.board[newY + nextY][newX + nextX] *= 2;\n          this.score += this.board[newY + nextY][newX + nextX];\n          this.board[startY][startX] = 0;\n          merged[newY + nextY][newX + nextX] = true;\n          hasChanged = true;\n        } else if (newY !== startY || newX !== startX) {\n          this.board[newY][newX] = this.board[startY][startX];\n          this.board[startY][startX] = 0;\n          hasChanged = true;\n        }\n      }\n    };\n\n    if (direction === 'up') {\n      traverse((y, x) => moveCell(y, x, -1, 0));\n    } else if (direction === 'down') {\n      traverse((y, x) => moveCell(3 - y, x, 1, 0));\n    } else if (direction === 'left') {\n      traverse((y, x) => moveCell(y, x, 0, -1));\n    } else if (direction === 'right') {\n      traverse((y, x) => moveCell(y, 3 - x, 0, 1));\n    }\n\n    if (hasChanged) {\n      this.newCell();\n      this.checkGameState();\n    }\n\n    return hasChanged;\n  }\n\n  moveUp() {\n    return this.move('up');\n  }\n\n  moveDown() {\n    return this.move('down');\n  }\n\n  moveLeft() {\n    return this.move('left');\n  }\n\n  moveRight() {\n    return this.move('right');\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$exports","$a5fd07fa01589658$var$Game","defaultInitialState","GameStatus","idle","playing","win","lose","constructor","initialState","board","map","row","score","status","getState","getScore","getStatus","start","newCell","restart","emptyCells","y","x","push","length","val","Math","floor","random","checkGameState","find","el","checkIfLose","includes","move","direction","hasChanged","merged","Array","from","traverse","callback","reverse","i","j","moveCell","startY","startX","nextY","nextX","newY","newX","moveUp","moveDown","moveLeft","moveRight","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$button","document","querySelector","$09e991522ca7e64e$var$score","$09e991522ca7e64e$var$rows","querySelectorAll","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$drawBoard","textContent","cell","cells","firstChild","removeChild","innerHTML","div","createElement","className","appendChild","addEventListener","classList","add","remove","eventKey","canMove","key","setTimeout","$09e991522ca7e64e$var$updateMessage","gameStatus"],"version":3,"file":"index.e0fa6ed3.js.map"}